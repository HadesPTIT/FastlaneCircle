before_all do
  Dotenv.overload '.env.secret'
  Dotenv.overload '.env.info'
end

after_all do |lane|

end

platform :android do

desc 'Build app  .
   Example:  fastlane android  buildApp buildType:develop ticketNumber:1234 '
  lane :Build do |values|
     ticketNumber = "#{ENV['TICKET_NUMBER']}"
     buildType = "#{ENV['BUILD_TYPE']}"
    puts "------------------- Stating build app  : #{buildType} .......... #{ticketNumber} "
#build
    gradle(task: 'clean' )
    gradle(task: 'assemble', build_type: buildType, properties: { 'versionCode' => ticketNumber } )
    gradle(task:'assembleAndroidTest')
    puts "------------------- Build app successfully ! "
  end

desc "Beta Distribution "
  lane :BuildFastlane do
  ticketNumber = "#{ENV['TICKET_NUMBER']}"
  buildType = "#{ENV['BUILD_TYPE']}"
  distribution = "#{ENV['DISTRIBUTE_FABRIC']}"

  puts "------------------- Build app -----ticketNumber- #{ticketNumber} - -----buildType- #{buildType}! "
  releaseNoteFile = File.read("./temp/releaseNote.txt")
  time1 = Time.new
  time = time1.strftime("%Y-%m-%d %H:%M:%S")
 releaseNote =   time + "   " + releaseNoteFile
  puts "------------------- Build app ---------- releaseNote ------  #{releaseNote}! "
  #build
  begin
 buildApp(ticketNumber: ticketNumber , buildType: buildType)
  rescue => ex
    UI.error(ex)
  end
  if distribution.nil? || distribution == 'false'
     puts "------------------- Build app -----ticketNumber-----distribution- #{distribution}! "
  else
     puts "------------------- Build app -----ngon-----distribution- #{distribution}! "
     begin
       uploadFabric(releaseNote:releaseNote)
      rescue => ex
      UI.error(ex)
     end
   #-------------
   begin
    commit = last_git_commit
    contentCW =
    "Ticket #{ticketNumber} has been uploaded successfully to Fabric!
    Platform : Android
    BuildType : develop
    Build number : #{ticketNumber}
    Author : #{commit[:author]}
    Email : #{commit[:author_email]}
    Note : #{releaseNote} "
     puts "------------------- Build app -----note - #{contentCW}! "
  notifyCW(contentCW:contentCW)
  rescue => ex
    UI.error(ex)
  end
  end

  end

  # -------------------

desc "Beta Distribution
Example:  fastlane develop remote:framgia pullNumber:123 branch:571_create_register_logic  |
Or: fastlane develop branch:571_create_register_logic   |
You can skip passing value for list parameter above"
  lane :develop do |options|



  #build
  begin
  buildApp(ticketNumber: ticketNumber , buildType:"develop")
  rescue => ex
    UI.error(ex)
  end
  begin
  File.write("./temp/releaseNote.txt", releaseNote)
  uploadFabric
  rescue => ex
    UI.error(ex)
  end
  begin
    contentSave =
    "Ticket #{ticketNumber} has been uploaded successfully to Fabric!
    Platform : Android
    BuildType : develop
    Build number : #{ticketNumber}
    Author : #{commit[:author]}
    Author email : #{commit[:author_email]}
    Note : #{releaseNote}
    "
  File.write("./temp/content.txt", contentSave)
  notifyCW
  rescue => ex
    UI.error(ex)
  end
  end

#++++++++++++++++++++

desc "Beta Distribution
Example:  fastlane staging remote:framgia pullNumber:123 branch:571_create_register_logic  |
Or: fastlane staging branch:571_create_register_logic   |
You can skip passing value for list parameter above"
  lane :staging do |options|

  releaseNoteInput = prompt(
      text: "Please enter your release notes. This note will be pushed on Fabric: ",
      multi_line_end_keyword: "END"
  )
 time1 = Time.new
 time = time1.strftime("%Y-%m-%d %H:%M:%S")
 releaseNote =   time + "   " + releaseNoteInput

  # buildNumber = options[:buildNumber]
  remote = options[:remote]
  pullNumber = options[:pullNumber]
  branchName = options[:branch]

  #fetch code
  content = ""
  #ticket number
  ticketNumber = ""
  ticketNumber = branchName.split('_').first
  # puts "#{ticketNumber}"
  commit = last_git_commit

  if remote.nil? || branchName.nil?
    puts "Do not fetch code"
      if branchName.nil?
        puts "Do not have branchName"
      else
      end
  else
    ensure_git_status_clean
    sh "git fetch #{remote} refs/pull/#{pullNumber}/head:#{branchName}"
    sh "git checkout #{branchName}"
  end

  #build
  begin
  buildApp(ticketNumber: ticketNumber , buildType:"staging")
  rescue => ex
    UI.error(ex)
  end
  begin
  File.write("./temp/releaseNote.txt", releaseNote)
  uploadFabric
  rescue => ex
    UI.error(ex)
  end
  begin
    contentSave =
    "Ticket #{ticketNumber} has been uploaded successfully to Fabric!
    Platform : Android
    BuildType : staging
    Build number : #{ticketNumber}
    Author : #{commit[:author]}
    Author email : #{commit[:author_email]}
    Note : #{releaseNote}
    "
  File.write("./temp/content.txt", contentSave)
  notifyCW
  rescue => ex
    UI.error(ex)
  end
  end
#++++++++++++++++++++


desc "Beta Distribution
Example:  fastlane  release remote:framgia pullNumber:123 branch:571_create_register_logic  |
Or: fastlane release branch:571_create_register_logic   |
You can skip passing value for list parameter above"
  lane :release do |options|

  releaseNoteInput = prompt(
      text: "Please enter your release notes. This note will be pushed on Fabric: ",
      multi_line_end_keyword: "END"
  )
 time1 = Time.new
 time = time1.strftime("%Y-%m-%d %H:%M:%S")
 releaseNote =   time + "   " + releaseNoteInput

  # buildNumber = options[:buildNumber]
  remote = options[:remote]
  pullNumber = options[:pullNumber]
  branchName = options[:branch]

  #fetch code
  content = ""
  #ticket number
  ticketNumber = ""
  ticketNumber = branchName.split('_').first
  # puts "#{ticketNumber}"
  commit = last_git_commit

  if remote.nil? || branchName.nil?
    puts "Do not fetch code"
      if branchName.nil?
        puts "Do not have branchName"
      else
      end
  else
    ensure_git_status_clean
    sh "git fetch #{remote} refs/pull/#{pullNumber}/head:#{branchName}"
    sh "git checkout #{branchName}"
  end

  #build
  begin
  buildApp(ticketNumber: ticketNumber , buildType:"release")
  rescue => ex
    UI.error(ex)
  end
  begin
  File.write("./temp/releaseNote.txt", releaseNote)
  uploadFabric
  rescue => ex
    UI.error(ex)
  end
  begin
    contentSave =
    "Ticket #{ticketNumber} has been uploaded successfully to Fabric!
    Platform : Android
    BuildType : release
    Build number : #{ticketNumber}
    Author : #{commit[:author]}
    Author email : #{commit[:author_email]}
    Note : #{releaseNote}
    "
  File.write("./temp/content.txt", contentSave)
  notifyCW
  rescue => ex
    UI.error(ex)
  end
  end

#-+++++++++++++++++++
desc 'Build app  .
   Example:  fastlane android  buildApp buildType:develop ticketNumber:1234 '
  lane :buildApp do |values|
    ticketNumber = values[:ticketNumber]
    buildType = values[:buildType]
    puts "------------------- Stating build app  : #{buildType} .......... #{ticketNumber} "
#build
    gradle(task: 'clean' )
    gradle(task: 'assemble', build_type: buildType, properties: { 'versionCode' => ticketNumber })
    puts "------------------- Build app successfully ! "
  end
#+++++++++++++++++++


desc 'Upload to Fabric.
   Example:  fastlane android  uploadFabric '
lane :uploadFabric do |values|
   releaseNote = values[:releaseNote]
   apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
   puts "------------------- Starting distribution via Fabric  .......... #{releaseNote} "
   puts "------------------- APK .......... #{apk} "

 crashlytics(
   api_token: "#{ENV['FABRIC_API_TOKEN']}",
   build_secret: "#{ENV['FABRIC_BUILD_SECRET']}",
   # groups:["#{ENV['GROUP_TESTER']}"],
   notifications: true,
   notes: "#{releaseNote}",
   apk_path: Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  )
 puts "------------------- Distribution via Fabric successfully !!  "
end

#++++++++++++++++++
desc "notification on chatwork
 Example : fastlane android  notifyCW "
  lane :notifyCW do |values|
    puts "------------------- Put notification to Chatwork ----------------------  "
    sendTo = ENV['SEND_TO']
    content = values[:contentCW]
    puts "------------------- Put notification to Chatwork ---------------------- #{content} "
    chatwork(
        message: "
        #{sendTo}
        #{content}",
        roomid: "#{ENV['CHATWORK_ROOM_ID']}", #change with your room id
        success: true,
        api_token: "#{ENV['CHATWORK_API_TOKEN']}" #api token of chatbot
    )
end
end
