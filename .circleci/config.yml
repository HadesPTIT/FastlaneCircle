version: 2

#
# & : Repeated nodes are first identified by an anchor (&) then aliased by asterisk (*)
# << : Reusable and extend (https://blog.daemonl.com/2016/02/yaml.html)
#

references:
  # We will define reusable references here

  ## Cache

  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace

  workspace: &workspace
               ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/intermediates
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
  persist_release_workspace: &persist_release_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  ## Docker image configurations

  docker:
    android_config: &android_config
      working_directory: *workspace
      docker:
        - image: circleci/android:api-28-alpha   # gcloud is baked into this image
      environment:
        TERM: dumb
        _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
        GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
        ADB_INSTALL_TIMEOUT: 20

  # Gcloud is baked in to circleci/android:api-28-alpha so not need to import google/cloud-sdk:latest
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  # Google Services
  export_gservices_key: &export_gservices_key
    run:
      name: Export Google Services key environment variable
      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services key
      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  # Google Cloud Service
  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/client-secret.json

jobs:

  # Build debug APK for unit tests and an instrumented test APK
  build_debug:
      <<: *android_config
      steps:
        - checkout
        - *restore_cache
        - run:
            name: Download dependencies
            command: ./gradlew androidDependencies
        - *save_cache
        - *export_gservices_key
        - *decode_gservices_key
        - run:
            name: Gradle build (debug)
            command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
        - *persist_debug_workspace
        - store_artifacts:
            path: app/build/outputs/apk/
            destination: /apk/

  # Run unit tests
  test_unit:
      <<: *android_config
      steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :app:testDebugUnitTest --no-daemon --max-workers 2
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  deploy_fabric:
      <<: *android_config
      steps:
        - checkout
        - *attach_debug_workspace
        - *restore_cache
        - run:
            name: Install fastlane
            command: bundle install
        - run:
            name: Deploy to fabric
            command: bundle exec fastlane android BuildFastlane

  # Run instrumented tests
  test_instrumented:
      <<: *android_config
      steps:
        - *attach_debug_workspace
        - *export_gcloud_key
        - *decode_gcloud_key
        - run:
            name: Set Google Cloud target project
            command: gcloud config set project circleci-7d00a
        - run:
            name: Authenticate with Google Cloud
            command: gcloud auth activate-service-account huongpt@circleci-7d00a.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
        - run:
            name: Configure environment
            command: |
              echo 'export APK_PATH=`find . -path "*.apk" ! -path "*unaligned.apk" ! -path "*Test*.apk" -print -quit`' >> $BASH_ENV
              echo 'export TEST_APK_PATH=`find "." "-path" "*Test*.apk" -print -quit`' >> $BASH_ENV
        - run:
            name: Run instrumented test on Firebase Test Lab
            command: |
              gcloud firebase test android run \
                --type instrumentation \
                --app ${APK_PATH} \
                --test ${TEST_APK_PATH} \
                --device model=Nexus4,version=22,locale=en_US,orientation=portrait \
#                --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
#                --directories-to-pull=/sdcard --timeout 30m
            no_output_timeout: 45m
#        - run:
#            name: Create directory to store test results
#            command: mkdir firebase
#        - run:
#            name: Download instrumented test results from Firebase Test Lab
#            command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-{some random ID}-{some other random ID} | tail -1`*" /root/workspace/firebase/ | true
#        - *persist_firebase_workspace
#        - store_artifacts:
#            path: firebase/
#            destination: /firebase/

  # Submit JaCoCo coverage report
#  report_coverage:
  # ...

workflows:
  version: 2
  #Setup your workflow here
  workflow:
    jobs:
      - build_debug
      - test_unit:
          requires:
            - build_debug
      - test_instrumented:
          requires:
            - build_debug
      - deploy_fabric:
          requires:
            - test_unit